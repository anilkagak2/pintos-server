##	NAME			ANIL KAG
##	ROLL NO. 		10010111
##	PINTOS ASSIGNMENT:	USERPROG 2A,2B & 2C with someparts of 2D
##	DATED			25/9/2012

--	DATA STRUCTURES

## thread.h
 changed the 'struct thread' structure (in addition to the changes
		done in part 1)
	#ifdef USERPROG
	    int ret_value;                      /* Return value for the thread. */
	    struct semaphore child_sema;        /* Semaphore for synchronization with process_wait for children. */
	    struct semaphore parent_sema;       /* Parent tries to down this semaphore for wait syscall. */
	    struct list children;               /* List of all the children of the thread. */
	    struct list_elem child_elem;        /* To insert in the parent's children list. */
	    struct thread *parent;              /* Parent's thread pointer. */
	    struct list fd_list;                /* List of file descriptors of thread.*/
	#endif

--	INITIALIZATIONS

## thread.c
 - init_thread ()
	  - initialize semaphores child_sema & parent_sema for the thread
	  - initialize the children list of the thread
	  - if the current thread is not the main thread, then insert it's list_elem
		in it's parent's children list, as main thread has no parent

--	FUNCTIONS ADDED
	THEIR LOGIC ALONG WITH THE APPRORIATE SYCHRONIZATION

## process.c

static char **
cmd_token (char *cmdline, void *aux)
	- breaks the cmdline into a char *argv[] like array, aux is added to the 
		last of the list before NULL
	- this function is called from	process_execute () & that function
		has to wait till the new process loads it's executable & hence
		need some kind of semaphore
	- this aux is a struct semaphore* casted into void pointer & added to
		the argv[] for sending the argument to the child process &
		then parent process will try to down this semaphore
	------------------- start Function ---------
	{
	  ASSERT (aux != NULL);
	  static char *argv[MAX_ARGS];
	  char *saveptr;
	  int i=0;

	  argv[i] = strtok_r (cmdline, " " ,&saveptr);

	  if (argv[0] == NULL)
	  {
	    PANIC ("commandline given is not valid");
	  }

	  else
	  {
	    while (argv[i] != NULL) {
		 argv[++i] = strtok_r (NULL," ",&saveptr);
	    }

	    argv[i] = (char *)aux;
	    argv[++i] = NULL;
	  }

	  return argv;
	}
	--------------------- end Function -------

## process.c
## functions changed
tid_t
process_execute (const char *cmd_line)
	- this function creates a new thread for executing the cmd_line
	- it breaks the command string into a C commandline argv[] array
	- this function should wait till the newly created thread loads it's
		  executeable & hence sema is used
	- if thread_create () was successful then wait on the semaphore
		which will be sema_up()'d by the child thread after load ()
		returns & child returns the load()'s return value in kargv[0]
		which was passed to it in thread_create()
	- if child was unsuccessful in loading it's executeable thn kargv[0]
		will be false

	------------------- start Function ---------
	{
	  --
	  --
	  struct semaphore sema;
	  sema_init (&sema,0);

	  char **kargv = cmd_token (fn_copy,(void *)&sema);
	
	  --
	  --
	  /* Create a new thread to execute FILE_NAME. */
	  tid = thread_create (kargv[0], PRI_DEFAULT, start_process, kargv);
	  if (tid == TID_ERROR)
	    palloc_free_page (kargv[0]); 

	  // wait for the child to load it's executable
	  else
	  {
	    sema_down (&sema);

	    // check the load ()'s return value
	    if (!kargv[0])
		return TID_ERROR;
	  }

	  return tid;
	}
	--------------------- end Function -------

static void
start_process (void *kargv)
	- apart from the initial functioning
	- check whether kargv is valid or not
	- cast it to char ** argv[] array
	- count the number of arguments given for extracting the semaphore
		embedded inside the argv[], extract it & decrease the argc by 1
	- after loading the executeable for the thread in memory setup the
		stack
	- Copy all the strings on the stack using memcpy (), then check for
		the alignment of the stack pointer (as it is accessed as a
		4byte entity)
	- Put argv[argc] = NULL as per the C Standards
	- Then place the pointers to the argv[]'s in reverse order i.e. starting at
		argc-1 till 0 (stored in the offset[]s which were initialized while
		copying the strings)
	- Finally put &argv (&argv[0]) on the stack,then argc & a fake return address 
		as the thread will start executing the main code after
		returning from this function, actually it is simulated as if
		the system came out of an interrupt & the process before interrupt was
		stored in intr_frame if & hence main code starts executing
	- After this setup call the signal the parent thread by sema_up() on
		the semaphore given to it in argv[] & placing the load's
		return value in argv[0]

	------------------- start Function ---------
	{
	  ASSERT (is_kernel_vaddr (kargv));
	  char **argv = (char **)kargv;
	  struct intr_frame if_;
	  bool success;

	  static int argc = 0;
	  while (argv[argc] != NULL)
		argc++;

	  --
	  --
	  --

	  // last argument is a semaphore address & not a char*
	  argc--;
	  struct semaphore *sema = (struct semaphore *)argv[argc];
	  argv[argc] = NULL;

	  success = load (argv[0], &if_.eip, &if_.esp);

	  if (success) {
        	int i = argc - 1;
	        int count = 0;
        	size_t ptr_size = sizeof (char *);
		uint32_t offset[MAX_ARGS];

		// argv[argc-1] --> argv[0]
		for (;i >= 0; i--) {
        	        if_.esp -= strlen (argv[i]) + 1;
                	memcpy (if_.esp,argv[i], strlen (argv[i]) + 1);
	                count += strlen (argv[i]) + 1;
			offset[i] = if_.esp;
	        }

        	// word align the stack pointer
	        if ( ((uint32_t)if_.esp % 4) != 0) {
			int decrease = ((uint32_t)if_.esp % 4);
		// i have to keep track of the offset till argv[0] & not the alignment
        	        count += decrease;
	               	if_.esp -= decrease;
        	}

		// argv[argc] = NULL
        	if_.esp -= ptr_size;
	        *(char **)(if_.esp) = NULL;

		// place the pointers to the argv's on the stack
		i = argc - 1;
		for (;i >= 0; i--) {
                	if_.esp -= ptr_size;
	                *(char **)(if_.esp) = offset[i];
	        }

        	if_.esp -= ptr_size;
	        *(char **)if_.esp = if_.esp + ptr_size;             // argv

        	if_.esp -= ptr_size;
	        *(int *)if_.esp = argc;               // argc

        	if_.esp -= ptr_size;
	        *(int **)if_.esp = 0;             // fake return address 
  	}

	  // since argv is a static variable, i put the status of success  or failure
	  // load () in this thread, at that place
	  argv[0] = (char *)success;
	  sema_up (sema);	// increment the sema's value on which process_execute was waiting
	  --
	  --
	  --
	}
	--------------------- end Function -------

int
process_wait (tid_t child_tid)
	- called by a thread for waiting on a child process (child_tid)
	- searches in the current thread's children list for the presence of
		child_tid, if found the wait till the completion of the
		child by calling sema_down () on child's parent_semaphore,
		else return -1(as there is some problem in waiting for this thread)
	- returns -1 in case child is not found in the children list

	--------------------- start Function -------
	{
	  struct list_elem *e;
	  bool childFound = false;

	  childFound = false;
  	  struct list *children = &thread_current ()->children;
	  struct thread *t;

	  // traverse the children list for the thread child_tid
	  for (e = list_begin (children); e != list_end (children); e = list_next (e)) {
	    t = list_entry (e, struct thread, child_elem);

	    if (t->tid == child_tid) {
	      childFound = true;
	      break;
	    }
 	 }

	  if (childFound) {
		sema_down (&t->parent_sema);
		list_remove (e);
		int32_t ret_val = t->ret_value;

		// signal the thread to call thread_exit ()
		sema_up (&thread_current ()->child_sema);
		return ret_val;
	  }

	  // either killed by kernel or may be child_tid is not a child of current thread
	  else return -1;
	}
	--------------------- end Function -------

## syscall.c

bool
is_ptr_valid (void *ptr)
	- checks the validity of user provided addresses
	- returns true only if ptr is not NULL & if it's a user virtual address
		& if it is available in page directory of the thread
	
	--------------------- start Function -------
	{
	  if (ptr == NULL) return false;
	  else if (!is_user_vaddr (ptr)) return false;
	  else if (!pagedir_get_page (thread_current ()->pagedir, ptr)) return false;
	  else return true;
	}
	--------------------- end Function -------

void
check_pointer (void *ptr)
	- handles the problem of calling is_ptr_valid () on ptr &
		call exit_handler(-1) if ptr is invalid
	
	--------------------- start Function -------
	{
	  if (!is_ptr_valid (ptr)) {
	     exit_handler (-1);
	  }
	}
	--------------------- end Function -------

void
exit_handler (int ret_value)
	- hepler function for exit system call
	- also useful in check_pointer () for exiting the call
	- need to wait till the parent process extracts the exit status
		otherwise on callin thread_exit() function the thread
		structure will get destroyed & then parent cannot extract the information out 
		of the it.
		Also the list_elem child_elem in the parent's children list
		should be removed.
	- Current thread signal's parent by calling sema_up () on it's
		parent_semaphore & wait's on parent's child_semaphore by
		sema_down () on it (accessible by the parent pointer)
	- Finally after synchornizing with parent & passing the exit code(with
		the help of ret_value field), 
		call thread_exit ()

	--------------------- start Function -------
	{
		/* Terminate this process. */
		struct thread *t = thread_current ();
		printf ("%s: exit(%d)\n",t->name, ret_value);

		t->ret_value = ret_value;

		// calling sema_up may wake up the main process
		// waiting in process_wait, you need to synchronize it
		// up your parent_semaphore 
		sema_up (&t->parent_sema);

		// now wait till the parent process get's the exit value
		// wait on parent's child semaphore
		sema_down (&t->parent->child_sema);

		thread_exit ();
	}
	--------------------- end Function -------


static void
syscall_handler (struct intr_frame *f)
	- internal interrupt handler for the interrupt vector no. 0x30
	- called when a process calls any of the syscalls given in <syscall.h>
	- given the intr_frame for the internal interrupt so that we can
		extract the parameters passed for the system function call
		available on the calling process's system stack
	- extract the stack pointer(esp) of the calling thread with the help
		of the intr_frame
	- check the pointers for their validity by check_pointer(), which
		calls exit_handler if the pointer is invalid
	- pop the syscall number from the stack pointed by user_esp
	- check against the syscall numbers defined in <syscall-nr.h>
	- then handling the case against which the syscall_no matches
	- Following cases are handled(as of now, tests cases are nunning for
		them):
	> SYS_HALT
		- no parameters needed
		- simply calls power_off() which immediately shut's down the computer

	> SYS_EXIT
		- exit status needs to be extracted
		- calls exit_handler () with the return status

	> SYS_EXEC
		- needs the commandline to be executed
		- extracts the commandline & checks for it's validity
		- if valid then calls process_execute() & stores the return 
			value in frame's eax field, which will be given to the
			thread on returning from this interrupt handler

	> SYS_WAIT
		- needs thread id as a parameter
		- extracts the thread id from the stack & call process_wait ()
			with this thread id
		- store the return value on f->eax (same as the SYS_EXEC case)
		
	> SYS_CREATE
		- need a file name to be created & it's initial size as a parameters
		- extracts them & calls filesys_create ()
		- stores the return value on f->eax

	> SYS_REMOVE
		- need a file name to be removed as a parameter 
		- extracts it & calls filesys_remove ()
		- stores the return value on f->eax
	
	> SYS_OPEN (tests cases are not running)
	> SYS_WRITE (implemented only for STDOUT)
		- need file descriptor(where to output), buffer(to output)
			& length of the buffer as a parameters
		- extracts them & calls put_buf (), after checking the
			validity of the buffer
		- stores the return value on f->eax (to modify)

	--------------------- start Function -------
	{
	  uint32_t *user_esp = f->esp;
	  size_t size_int = sizeof (int *);

	  // check for the validity of the Stack Pointer
	  // before calling anything because the thread_current ()
	  // rounds down the value of esp to guess the struct thread *
	  check_pointer (user_esp);

	  // get the struct thread for calling process
	  struct thread *t = thread_current ();

	  uint32_t syscall_no = *user_esp;

	  // pop the value off the stack
	  user_esp++;

	  switch (syscall_no) {
	    case SYS_HALT:
		/* Halt the operating system. */
		printf ("Halt is called\n");
		power_off ();
		break;

	    case SYS_EXIT: {
		/* Terminate this process. */
		check_pointer (user_esp);
		uint32_t ret_value = *user_esp;
	  	user_esp++;
	
		exit_handler (ret_value);
		break;
		}

	    case SYS_EXEC: {
		/* Start another process. */
		check_pointer (user_esp);
		const char *cmd_line = *user_esp;
		user_esp++;
	
		if (is_ptr_valid (cmd_line))
			f->eax = process_execute (cmd_line);
		else f->eax = -1;
	
		break;
		}

	    case SYS_WAIT: {
		/* Wait for a child process to die. */
		check_pointer (user_esp);
		tid_t child_tid = *user_esp;
		user_esp++;

		f->eax = process_wait (child_tid);
		break;
		}

	    case SYS_CREATE: {
		/* Create a file. */
		check_pointer (user_esp);
		const char *file_name = *user_esp;
		user_esp++;
		
		check_pointer (user_esp);
		size_t initial_size = *user_esp;
		user_esp++;

		check_pointer (file_name);
	
		// it's a critical section : accessing filesystem code
		//	lock_acquire (&filesys_lock);
		f->eax = filesys_create (file_name, initial_size);
		//	lock_release (&filesys_lock);

		break;
		}

	    case SYS_REMOVE: {
		/* Delete a file. */
		check_pointer (user_esp);
		const char *file_name = *user_esp;
		user_esp++;
	
		check_pointer (file_name);

		// it's a critical section : accessing filesystem code
		//	lock_acquire (&filesys_lock);
		f->eax = filesys_remove (file_name);
		//	lock_release (&filesys_lock);
	
		break;
		}

	    case SYS_OPEN: {
		/* Open a file. */
		check_pointer (user_esp);
		const char *file_name = *user_esp;
		user_esp++;
	
		check_pointer (file_name);
	
		// it's a critical section : accessing filesystem code
		//	lock_acquire (&filesys_lock);
		struct file *fp = filesys_open (file_name);
		//	lock_release (&filesys_lock);
	
		// could not open the file
		if (!fp)
			f->eax = -1;

		// need to give it a thought
		else {
			// will this be different on different invocations of this 
			// open () call
			static struct file_descriptor fd;
			fd.fp = fp;
			list_insert (&thread_current ()->fd_list, &(fd.elem));
			f->eax = (int)(&fd);
		}

		break;
		}

	    case SYS_FILESIZE:
		/* Obtain a file's size. */
		printf ("Filesize is called\n");
		break;

	    case SYS_READ:
		/* Read from a file. */
		printf ("Read is called\n");
		break;

	    case SYS_WRITE: {
		/* Write to a file. */
		check_pointer (user_esp);
		uint32_t file_desc = *user_esp;
		user_esp++;

		check_pointer (user_esp);
		char *buf = *user_esp;
		user_esp++;

		check_pointer (user_esp);
		uint32_t len = *user_esp;
		user_esp++;

		if (file_desc == STDOUT_FILENO)
			putbuf (buf, len);

		t->ret_value = 0;
		f->eax = 0;
		break;
		}

	    case SYS_SEEK:
		/* Change position in a file. */
		printf ("Seek is called\n");
		break;

	    case  SYS_TELL:
		/* Report current position in a file. */
		printf ("Tell is called\n");
		break;

	    case SYS_CLOSE:
		/* Close a file. */
		printf ("Close is called\n");
		break;

	  }

	}
	--------------------- end Function -------


--	RATIONALE
		- Need to think over the sychronization in open system call
		- There is a trade-off between the simple implementation of
			check_pointer () & the huge number of places where
			it's been called, instead the other solution for
			pointer validity checking as given in the book is to
			handle the page fault.
			That will be much less of headache but will be
			somewhat complex, i'll do that some time later
		- Is there really any need of having parent pointer in the
			thread structure ?? Otherwise any process can
			mislead the parent & create some problems.
			Need to think over it.
--
